/* feedreader.js
 *
 * This is the spec file that Jasmine will read and contains
 * all of the tests that will be run against your application.
 */

/* We're placing all of our tests within the $() function,
 * since some of these tests may require DOM elements. We want
 * to ensure they don't run until the DOM is ready.
 */
$(function() {
    /* This is our first test suite - a test suite just contains
    * a related set of tests. This suite is all about the RSS
    * feeds definitions, the allFeeds variable in our application.
    */
    describe('RSS Feeds', function() {
        /* Test to make sure that the allFeeds variable has been 
         * defined and that it is not empty.
         */
        it('are defined', function() {
            expect(allFeeds).toBeDefined();
            expect(allFeeds.length).not.toBe(0);
        });

        /* Loops through each feed in the allFeeds object and
         * ensures it has a URL defined
         * and that the URL is not an empty string.
         */

        it('have valid URLs', function(){
            for(var i = 0; i < allFeeds.length; i++){
                expect(allFeeds[i].url).toBeDefined();
                expect(allFeeds[i].url).toEqual(jasmine.any(String));
                expect(allFeeds[i].url.length).toBeGreaterThan(0);
            }
        });

        /* Loops through each feed in the allFeeds object and
         * ensures it has a name defined
         * and that the name is not an empty string
         */
         it('have valid names', function(){
            for(var i = 0; i < allFeeds.length; i++){
                expect(allFeeds[i].name).toBeDefined();
                expect(allFeeds[i].name).toEqual(jasmine.any(String));
                expect(allFeeds[i].name.length).toBeGreaterThan(0);
            }
        });
    });

    /* Testing for the menu */
    describe('The menu', function() {
        var menu,
            menuIcon,
            body;

        beforeEach(function(){
            menu = $('.slide-menu');
            menuicon = $('.menu-icon-link');
            body = $('body');
        });

        it('exists', function(){
            expect(menu.length).toBeGreaterThan(0);
        });

        it('is hidden by default', function() {
            //todo: custom matcher to check if menu is hidden by some other method OR current method
            expect(body.hasClass('menu-hidden')).toBeTruthy();
            expect(menu.offset().left).toEqual(0 - menu.outerWidth());
        });

        it('changes visibility when icon is clicked', function() {
            //verify that menu icon exists
            expect(menuicon.length).toBeGreaterThan(0);
            //open menu
            menuicon.click();
            expect(body.hasClass('menu-hidden')).toBeFalsy();
            //close menu
            menuicon.click();
            expect(body.hasClass('menu-hidden')).toBeTruthy();
        });
    });
    
    describe('Initial Entries', function() {

        beforeEach(function(done){
            loadFeed(0, done);
        });

        /* When the loadFeed function is called and completes its work,
         * there is at least a single .entry element within the .feed container.
         * Remember, loadFeed() is asynchronous so this test will require
         * the use of Jasmine's beforeEach and asynchronous done() function.
         */
        it('are loaded when loadFeed is called', function(){
            expect($('.feed .entry').length).toBeGreaterThan(0);
        });

        /* Check that links are inserted correctly for each entry
         */
        it('have links', function(){
            expect($('.feed>.entry-link').length).toBeGreaterThan(0);
            $('.feed>.entry-link').each(function(){
                expect($(this).attr('href')).toBeDefined();
            });
        });
    });
        
    describe('New Feed Selection', function() {
        var original;

        beforeEach(function(done){
            loadFeed(0, function(){
                original = $('.feed').html();
                done();
            });
        });

        it('is loaded when loadFeed is called', function(done){
            loadFeed(1,function(){
                //check to confirm feed is no longer equal to original
                expect($('.feed').html()).not.toEqual(original);
                //check that entries are actually loaded.
                expect($('.feed>.entry-link').length).toBeGreaterThan(0);
                done();
            });
            
        });
    });

    /* Test suite for feeds generated by user (future functionality)
     */
    xdescribe('User Generated Feed', function() {
        var id,
            original;
        beforeAll(function(done){
            loadFeed(0, done);
            original = $('.feed').html();
            id = addFeed('name','url');
        });

        //check functionality of adding a new feed to array of feeds
        it('can add a new feed', function(){
            expect(id).toBeDefined();
            expect(allFeeds[id]).toBeDefined();
            expect(allFeeds[id].name).toEqual('name');
            expect(allFeeds[id].url).toEqual('url');
        });

        //check loading of the new feed
        it('can load info from new feed', function(done){
            loadFeed(id,function(){
                expect($('.feed').html()).not.toEqual(original);
                expect($('.feed>.entry-link').length).toBeGreaterThan(0);
                done();
            });
        });
    });

    /* Testing if invalid feed information is used*/
    xdescribe('Invalid Feed', function(){
        var id;
        beforeAll(function(done){
            id = addFeed('name','invalid url');
            loadFeed(id, done);
        });

        it('will display an error to user', function(){
            //may change depending on implementation.
            expect($('.error-message').length).toBeGreaterThan(0);
        });
    });
}());
